@page "/medicos/create"
@using ProConsulta.Extensions
@using ProConsulta.Models
@using ProConsulta.Repositories.Doctors
@using ProConsulta.Repositories.Specialities
@inject IDoctorRepository DoctorRepository
@inject ISpecialityRepository SpecialityRepository
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Médicos</PageTitle>
<MudText Type="Typo.h3">Cadastro de Médico</MudText>
<MudPaper Class="pa-8 mt-4">
    <EditForm Model="@InputModel" OnValidSubmit="OnValidSubmitAsync">
        <DataAnnotationsValidator/>
        <MudTextField
            Label="Nome"
            HelperText="*Campo obrigatório"
            @bind-Value="InputModel.Name"
            For="@(() => InputModel.Name)"
            Variant="Variant.Outlined"/>

        <MudTextField
            Label="Documento"
            HelperText="*Campo obrigatório"
            @bind-Value="InputModel.Document"
            For="@(() => InputModel.Document)"
            Mask="@(new PatternMask("000.000.000-00"))"
            Variant="Variant.Outlined"/>

        <MudTextField
            Label="CRM"
            HelperText="*Campo obrigatório"
            @bind-Value="InputModel.CRM"
            For="@(() => InputModel.CRM)"
            Mask="@(new PatternMask("aa-000000"))"
            Variant="Variant.Outlined"/>

        <MudTextField
            Label="Celular"
            HelperText="*Campo obrigatório"
            @bind-Value="InputModel.PhoneNumber"
            For="@(() => InputModel.PhoneNumber)"
            Mask="@(new PatternMask("(00) 0 0000-0000"))"
            Variant="Variant.Outlined"/>

        <MudStack>
            <MudSelect
                @bind-Value="InputModel.SpecialityId"
                Label="Especialidade"
                AnchorOrigin="Origin.BottomCenter"
                Variant="Variant.Outlined"
                Placeholder="Selecione a Especialidade"
                Text=""
                For="@(() => InputModel.SpecialityId )"
                HelperText="*Campo Obrigatório">
                @foreach (var speciality in Specialities)
                {
                    <MudSelectItem Value="@speciality.Id">@speciality.Name</MudSelectItem>
                }
            </MudSelect>
        </MudStack>
        <MudDivider Class="m-4"/>

        <MudButton
            Variant="Variant.Filled"
            StartIcon="@Icons.Material.Filled.Save"
            Color="Color.Info"
            Size="Size.Large"
            ButtonType="ButtonType.Submit">
            Salvar
        </MudButton>
    </EditForm>
</MudPaper>

@code {
    private DoctorInputModel InputModel { get; set; } = new DoctorInputModel();
    private List<Speciality> Specialities { get; set; } = new List<Speciality>();

    protected override async Task OnInitializedAsync()
    {
        Specialities = await SpecialityRepository.GetAllAsync();
    }

    private async Task OnValidSubmitAsync(EditContext editContext)
    {
        try
        {
            if (editContext.Model is DoctorInputModel model)
            {
                var doctor = new Doctor
                {
                    Name = model.Name,
                    Document = model.Document.SomenteCaracteres(),
                    PhoneNumber = model.PhoneNumber.SomenteCaracteres(),
                    CRM = model.CRM.SomenteCaracteres(),
                    SpecialityId = model.SpecialityId,
                    CreateDate = model.CreateDate
                };

                await DoctorRepository.AddAsync(doctor);
                Snackbar.Add("Médico cadastrado com sucesso!", Severity.Success);
                NavigationManager.NavigateTo("/medicos");
            }
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

}